/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Modelos.DetalleTransaccionTableModel;
import Modelos.PeriodoContable;
import Modelos.Transaccion;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Elmer
 */
public class GestionarTransaccion extends javax.swing.JFrame {

    public DetalleTransaccionTableModel detalleTransaccionTModel = new DetalleTransaccionTableModel();
    private Connection conexion;

    /**
     * Creates new form DetalleTransaccionJFF
     */
    public GestionarTransaccion() {
        initComponents();
        background();
        getIconImage();
        inicializarColumnas();
        conectar();
        consultaInicial();
    }

    private void conectar() {
        try {
            conexion = DriverManager.getConnection("jdbc:postgresql://localhost:5432/sic",
                    "semitas", "semita");
        } catch (Exception ex) {
            Logger.getLogger(GestionarTransaccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/LOGO PEQUEÑO.jpg"));
        return retValue;
    }
        public void background() {
            Fondo ima = new Fondo();
            ima.setSize(this.getSize());
            this.add(ima);
        }

    private void inicializarColumnas() {
        TableColumnModel tColumnModel = new DefaultTableColumnModel();
        for (int i = 0; i < 4; i++) {
            TableColumn col = new TableColumn(i);

            switch (i) {
                case 0:
                    col.setHeaderValue("Codigo Transaccion");
                    break;
                case 1:
                    col.setHeaderValue("Descripcion");
                    break;
                case 2:
                    col.setHeaderValue("Fecha");
                    break;
                case 3:
                    col.setHeaderValue("Monto");
                    break;
            }
            tColumnModel.addColumn(col);
        }
        tablatransacciones.setColumnModel(tColumnModel);
    }

    private void consultaInicial() {
        try {
            String sentenciaSql = "SELECT idtransaccion,descripciondetalle,fechatransaccion,monto FROM transaccion";
            Statement statement = this.conexion.createStatement();
            ResultSet resultado = statement.executeQuery(sentenciaSql);
            while (resultado.next()) {
                Transaccion transaccion = new Transaccion();
                transaccion.idTransaccion = resultado.getInt("idtransaccion");
                transaccion.descripcion = resultado.getString("descripciondetalle");
                transaccion.fecha = resultado.getDate("fechatransaccion");
                transaccion.monto = resultado.getDouble("monto");
                this.detalleTransaccionTModel.transacciones.add(transaccion);
            }
            tablatransacciones.repaint();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al recuperar las transacciones de la base de datos");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablatransacciones = new javax.swing.JTable();
        btnConsultarTransaccion = new javax.swing.JButton();
        txtConsultarTransaccion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnEditarTransaccion = new javax.swing.JButton();
        btnInsertarTransaccion = new javax.swing.JButton();
        btnEliminarTransaccion = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel1.setText("LISTADO DE TRANSACCIONES");

        tablatransacciones.setModel(detalleTransaccionTModel);
        jScrollPane1.setViewportView(tablatransacciones);

        btnConsultarTransaccion.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnConsultarTransaccion.setText("Consultar Transaccion");
        btnConsultarTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarTransaccionActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel3.setText("Código transacción");

        btnEditarTransaccion.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnEditarTransaccion.setText("Editar Transaccion");
        btnEditarTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarTransaccionActionPerformed(evt);
            }
        });

        btnInsertarTransaccion.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnInsertarTransaccion.setText("Insertar Transaccion");
        btnInsertarTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarTransaccionActionPerformed(evt);
            }
        });

        btnEliminarTransaccion.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnEliminarTransaccion.setText("Eliminar Transaccion");
        btnEliminarTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarTransaccionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(52, 52, 52))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtConsultarTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(btnConsultarTransaccion)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEditarTransaccion)
                                .addGap(170, 170, 170)
                                .addComponent(btnInsertarTransaccion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEliminarTransaccion)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConsultarTransaccion)
                        .addComponent(jLabel3))
                    .addComponent(txtConsultarTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertarTransaccion)
                    .addComponent(btnEliminarTransaccion)
                    .addComponent(btnEditarTransaccion))
                .addContainerGap())
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/LOGO PEQUEÑO.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarTransaccionActionPerformed
        // TODO add your handling code here:
        InsertarTransaccion it = new InsertarTransaccion();
        it.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnInsertarTransaccionActionPerformed

    private void btnConsultarTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarTransaccionActionPerformed
        // TODO add your handling code here:
        detalleTransaccionTModel.transacciones.clear();
        try {
            PreparedStatement statement = null;
            String codigo = txtConsultarTransaccion.getText();
            int idtransaccion = Integer.parseInt(codigo);
            String sentenciaSql = "SELECT idtransaccion,descripciondetalle,fechatransaccion,monto FROM transaccion ";
            if (!codigo.isEmpty()) {
                sentenciaSql += "WHERE idtransaccion=" + idtransaccion;
                statement = this.conexion.prepareStatement(sentenciaSql);
            } else {
                statement = this.conexion.prepareStatement(sentenciaSql);
            }
            ResultSet resultado = statement.executeQuery();
            while (resultado.next()) {
                Transaccion transaccion = new Transaccion();
                transaccion.idTransaccion = resultado.getInt("idtransaccion");
                transaccion.descripcion = resultado.getString("descripciondetalle");
                transaccion.fecha = resultado.getDate("fechatransaccion");
                transaccion.monto = resultado.getDouble("monto");
                detalleTransaccionTModel.transacciones.add(transaccion);
            }
            tablatransacciones.repaint();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al recuperar las transacciones de la base de datos");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnConsultarTransaccionActionPerformed

    private void btnEditarTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarTransaccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditarTransaccionActionPerformed

    private void btnEliminarTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarTransaccionActionPerformed
        // TODO add your handling code here:
        //indice de las filas seleccionadas
        int[] indices = tablatransacciones.getSelectedRows();
        List<Transaccion> aEliminar = new ArrayList<Transaccion>();
        for (int i : indices) {
            Transaccion transaccion = detalleTransaccionTModel.transacciones.get(i);
            String sentenciaSql = "DELETE FROM transaccion WHERE idtransaccion = ?";
            aEliminar.add(transaccion);
            try {
                PreparedStatement prepStat = conexion.prepareStatement(sentenciaSql);
                prepStat.setInt(1, transaccion.idTransaccion);
                prepStat.executeUpdate();
                JOptionPane.showMessageDialog(this, "Elimino correctamente " + transaccion.idTransaccion);
                UpdateJTable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al eliminar las transacciones de la base de datos");
            }
        }
        tablatransacciones.repaint();
    }//GEN-LAST:event_btnEliminarTransaccionActionPerformed
    private void UpdateJTable(){
        detalleTransaccionTModel.transacciones.clear();
        try {
            PreparedStatement statement = null;
            String sentenciaSql = "SELECT idtransaccion,descripciondetalle,fechatransaccion,monto FROM transaccion ";
            statement = this.conexion.prepareStatement(sentenciaSql);
            ResultSet resultado = statement.executeQuery();
            while (resultado.next()) {
                Transaccion transaccion = new Transaccion();
                transaccion.idTransaccion = resultado.getInt("idtransaccion");
                transaccion.descripcion = resultado.getString("descripciondetalle");
                transaccion.fecha = resultado.getDate("fechatransaccion");
                transaccion.monto = resultado.getDouble("monto");
                detalleTransaccionTModel.transacciones.add(transaccion);
            }
            tablatransacciones.repaint();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al recuperar las transacciones de la base de datos");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionarTransaccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionarTransaccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionarTransaccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionarTransaccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionarTransaccion().setVisible(true);
            }
        });
    }

    List<Transaccion> transacciones = new ArrayList<Transaccion>();

    //Metodo para llenar tablas con la base de datos
    public void llenarTabla() {

        for (int i = 0; i < transacciones.size(); i++) {
            Object[] fila = new Object[4];
            fila[0] = transacciones.get(i).getIdTransaccion();
            fila[1] = transacciones.get(i).getDescripcion();
            fila[2] = transacciones.get(i).getFecha();
            fila[3] = transacciones.get(i).getMonto();
        }
        tablatransacciones.updateUI();//actualiza la tabla
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultarTransaccion;
    private javax.swing.JButton btnEditarTransaccion;
    private javax.swing.JButton btnEliminarTransaccion;
    private javax.swing.JButton btnInsertarTransaccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablatransacciones;
    private javax.swing.JTextField txtConsultarTransaccion;
    // End of variables declaration//GEN-END:variables
}
